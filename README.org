Adapted from: [[https://gitlab.com/rycee/nur-expressions][Rycee's NUR Expressions]]

* Installation
Add this module to your nix flake

Example:
#+begin_src nix
  {
    description = "Home manager config flake";

    inputs = {
      nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
      emacs-init.url = "github:firefoxsalesman/NixEmacs";
      
      home-manager = {
        url = "github:nix-community/home-manager";
        inputs.nixpkgs.follows = "nixpkgs";
      };
    };

    outputs = { self, home-manager, nixpkgs, emacs-init, ... }@inputs:
      let
        system = "x86_64-linux";
        
        pkgs = import nixpkgs {
          inherit system;
          config.allowUnfree = true;
          overlays = [
            inputs.emacs-init.overlay
          ];        
        };
      in
        {
          homeConfigurations."holschcc" = home-manager.lib.homeManagerConfiguration {
            inherit pkgs;
            extraSpecialArgs = {
              inherit self;
              inherit inputs;
              inherit system;
            };
            modules = [
              ./home.nix
              emacs-init.homeModules.emacs-init
              emacs-init.homeModules.emacs-presets # if you would like to use configuration presets
            ];
          } ;
        } ;
  }

#+end_src

* Usage
All options are found under =programs.emacs.init=

You will need to set =programs.emacs.init.enable= to true in order for this module to do anything

You will need emacs 30 in order to take advantage of the presets, as many of them use new features introduced in that version

* Options
** Optimizations
*** =programs.emacs.init.packageQuickstart=
If set to false, package.el will be disabled.

Type: Boolean

Default: true

*** =programs.emacs.init.recommendedGcSettings=
If set to true, emacs will wait until it has started to do garbage collections

Type: Boolean

Default: false

*** =programs.emacs.init.largeFileHandling=
If set to true, will optimize the opening of large files (as seen in [[https://github.com/doomemacs/doomemacs][Doom Emacs]])

Type: Boolean

Default: false

** =programs.emacs.init.earlyInit=
The contents of early-init.el

Type: String

Default: ""

** =programs.emacs.init.prelude=
Configuration to put at the start of init.el

Type: String

Default: ""

** =programs.emacs.init.postlude=
Configuration to put at the end of init.el

Type: String

Default: ""

** =programs.emacs.init.hasOn=
Installs & loads [[https://gitlab.com/axgfn/on.el][on.el]].

** =programs.emacs.init.usePackageVerbose=
Type: Boolean

Sets =use-package-verbose= to the appropriate value

Default: False

** =programs.emacs.init.usePackage=
Contains all the different packages you want to configure.

Some things of note:
+ Nix will sort your packages alphabetically when it generates your init.el. There is no way around this, so if you need to specify load order, you'll need to use keywords like =after=
+ NixEmacs will automatically install the packages specified in these use package statements
+ Don't forget to set =enable= to true for each package.

*** An example
#+begin_src nix
  programs.emacs.init.usePackage.mpv = {
      enable = true;
      command = ["efs/mpv-browse-url" "efs/mpv-eww-url"];
      config = ''
        (defun efs/mpv-browse-url (url &optional single)
          (mpv-play-url url))
      
        (defun efs/mpv-eww-url ()
          (interactive)
          (mpv-play-url (eww-current-url)))
      '';
  };
#+end_src

*** Options
**** =package=
The emacs package to install

Defaults to the name of the package being configured & loaded, so you won't need to set this unless the name of the package being loaded differs from its name in the repository

**** =chords=
Sets the =:chords= option for [[https://github.com/waymondo/use-package-chords][Use Package Chords]]

If you use this option, Use Package Chords will be installed & loaded for you

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.ace-jump-mode.chords = {
    "jj" = "ace-jump-char-mode";
    "jk" = "ace-jump-word-mode";
  };
#+end_src

**** =bind=
Sets the =:bind= option.

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.ace-jump-mode.bind = {
    "c" = "ace-jump-char-mode";
    "w" = "ace-jump-word-mode";
  };
#+end_src

**** =bind-local=
Sets the =:bind= option with local keymaps

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.helm = {
    enable = true;
    bindLocal = {
      helm-command-map = { "C-c h" = "helm-execute-persistent-action"; };
    };
  };
#+end_src

**** =bind-keymap=
The entries to use for =:bind-keymap=

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.projectile = {
    enable = true;
    bindKeyMap = {
      "C-c p" = "projectile-command-map";
    };
  };
#+end_src

**** =mode=
Entries for =:mode=. Don't forget to double quote each entry.

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.python-ts-mode = {
      enable = true;
      mode = [''"\\.py\\'"''];
  };
#+end_src

**** =after=
A list of packages to be used in use-package's =:after= keyword

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.evil-collection = {
    enable = true;
    after = ["evil"];
  };
#+end_src

**** =afterCall=
Entries to use for the =:after-call= option (as seen in [[https://github.com/doomemacs/doomemacs][Doom Emacs]])

Basically, after call defers loading the package until the specified hook is run

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.eshell-git-prompt = {
    enable = true;
    afterCall = ["eshell-mode"];
  };
#+end_src

**** =defer=
The =:defer= option. Can be a boolean or a positive number

**** =deferIncrementally=
The =:defer-incrementally= option (as seen in [[https://github.com/doomemacs/doomemacs][Doom Emacs]])

When emacs is done loading, incrementally deferred packages will start to load while emacs is idle.

This option can be set to true, or to a list of package names.
+ If it's true, loading will behave as described above
+ If it's a list of package names, those packages will be incrementally loaded first (this is useful for breaking up large packages like org-mode)

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage = {
    nxml = {
      enable = true;
      deferIncrementally = true;
    };

    org = {
      enable = true;
      deferIncrementally = ["calendar" "find-func" "format-spec" "org-macs" "org-compat" "org-faces" "org-entities" "org-list" "org-pcomplete" "org-src" "org-footnote" "org-macro" "ob" "org" "org-agenda" "org-capture" "evil-org-agenda"];
    };
  };
#+end_src

**** =command=
The =:commands= keyword.

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.nerd-icons = {
    enable = true;
    command = [
      "nerd-icons-octicon"
      "nerd-icons-faicon"
      "nerd-icons-flicon"
      "nerd-icons-wicon"
      "nerd-icons-mdicon"
      "nerd-icons-codicon"
      "nerd-icons-devicon"
      "nerd-icons-ipsicon"
      "nerd-icons-pomicon"
      "nerd-icons-powerline"
    ];
  };
#+end_src

**** =hook=
The =:hook= option for use-package.

Example usage:
#+begin_src nix
  programs.emacs.usePackage.init.eglot = {
    enable = true;
    hook = ["(python-mode . eglot-ensure)"];
  };
#+end_src

**** General.el
Using any of these options will automatically install & load general.
***** Binding keys
You can use shorthand for evil states
+ =:n=- normal
+ =:i=- insert
+ =:v=- visual
+ =:o=- operator
+ =:m=- motion
+ =:e=- emacs
+ =:h=- hybrid
+ =:g=- god
+ =:s=- symex

You can also chain them together, for example, if you wish to bind a key in normal, insert, & operator states, you could type =:nio=

This shorthand was inspired by doom's =map!=

****** =general=
Used for global keys in the =:general= option.

In order to facilitate remapping, keys are not quoted automatically.

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.helpful = {
    enable = true;
    general = {
      "[remap describe-variable]" = "'helpful-variable";
      ''"C-h f"'' = "'helpful-function";
    };
  };
#+end_src
****** =generalOne=
Sets =:general= keybindings with one additional argument (such as evil state, keymap, or leader key)

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.consult = {
    enable = true;
    generalOne = {
      ":n" = {
        "/" = "'consult-line";
      };
      "org-mode-map" = {
        "M-a" = "'consult-org-heading";
      };
    };
  };
#+end_src

****** =generalTwoConfig=
Sets =:general-config= options that take 2 arguments (such as evil state, keymap, or leader key)

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.vundo = {
    enable = true;
    generalTwoConfig = ":n".vundo-mode-map."C-e" = "'vundo-next";
  };
#+end_src

****** =generalConfig=
Used for global keys in the =:general-config= option.

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.helpful = {
    enable = true;
    generalConfig = {
      "C-h f" = "'helpful-function";
    };
  };
#+end_src
****** =generalOneConfig=
Sets =:general-config= keybindings with one additional argument (such as evil state, keymap, or leader key)

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.consult = {
    enable = true;
    generalOneConfig = {
      ":n" = {
        "/" = "'consult-line";
      };
      "org-mode-map" = {
        "M-a" = "'consult-org-heading";
      };
    };
  };
#+end_src

****** =generalTwo=
Sets =:general= options that take 2 arguments (such as evil state, keymap, or leader key)

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.vundo = {
    enable = true;
    generalTwo = ":n".vundo-mode-map."C-e" = "'vundo-next";
  };
#+end_src

***** =ghook=
The =:ghook= option from general.el

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.envrc = {
    enable = true;
    ghook = ["('after-init-hook 'envrc-global-mode)"];
  };
#+end_src

***** =gfhook=
The =:gfhook= option from general.el

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.racket-mode = {
      enable = true;
      gfhook = ["('racket-mode-hook 'hs-minor-mode)"];
  };
#+end_src

**** =defines=
The =:defines= option from use-package.

Takes a list of strings, which should be the names of the functions the package defines

**** =lsp=
Loads & starts lsp-mode upon entering the package's major mode

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.racket-mode = {
    enable = true;
    lsp = true;
  };
#+end_src

**** =eglot=
Loads & starts eglot upon entering the package's major mode

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.racket-mode = {
    enable = true;
    eglot = true;
  };
#+end_src

You can also use a string to configure the language server you want to use with [[https://gitlab.com/aidanhall/use-package-eglot][use-package-eglot]]
#+begin_src nix
  programs.emacs.init.usePackage.json5-ts-mode = {
    enable = true;
    eglot = ''("vscode-json-language-server" "--stdio")'';
  };
#+end_src

**** =lspce=
Loads & starts lspce upon entering the package's major mode

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.racket-mode = {
    enable = true;
    lspce = true;
  };
#+end_src

You can also use a string to configure the language server you want to use. It takes the token for a mode (see lspce's [[https://github.com/zbelial/lspce][repository]] for more details) or a list of mode tokens, the command to call a language server, & optionally its arguments. See the documentation for the macro =nix-emacs-lspce-add-server-program= for more details
#+begin_src nix
  programs.emacs.init.usePackage.json5-ts-mode = {
    enable = true;
    lspce = ''"json5" "vscode-json-language-server" "--stdio"'';
  };
#+end_src


**** =symex=
Binds =symex-mode-interface= to enter in evil's normal state for the package's major mode. This will also load symex if it isn't already loaded

Setting this option will install symex automatically

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.racket-mode = {
    enable = true;
    symex = true;
  };
#+end_src

**** =demand=
The =:demand= option from use package.

Type: boolean

**** =diminish=
A list of strings to be passed to the =:diminish= 

If this option is set, diminish will be installed & loaded automatically

**** =functions=
The =:functions= option from use-package.

Takes a list of strings, which should be the names of the functions the package defines

**** =custom=
The =:custom= option

Can be a string, int, float, or a boolean. String values represent everything that isn't a boolean, so if your custom value is an elisp string, you'll need to quote it twice

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.dashboard = {
    enable = true;
    custom = {
      dashboard-banner-logo-title = ''"Emacs: The one true desktop environment"'';
      dashboard-center-content = true;
      dashboard-items = '''((recents   . 5)
                            (bookmarks . 5)
                            (projects  . 5)
                            (agenda    . 5))'';
      dashboard-icon-type = "'nerd-icons";
      dashboard-set-heading-icons = true;
      dashboard-set-file-icons = true;
      dashboard-agenda-sort-strategy = "'(time-up)";
    };
  };
#+end_src

**** =config=
Use package's =:config= option. Takes a string

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.elec-pair = {
    enable = true;
    config = ''
      ;; < & > are not delimiters. Change my mind.
      ;; Courtesy of DT. https://gitlab.com/dwt1/configuring-emacs/-/tree/main/07-the-final-touches?ref_type=heads
      (gsetq electric-pair-inhibit-predicate `(lambda (c)
        (if (or (char-equal c ?<) (char-equal c ?>))
            t
            (,electric-pair-inhibit-predicate c))))
    '';
  };
#+end_src

**** =preface=
Use package's =:preface= option. Takes a string

Example usage:
#+begin_src nix
programs.emacs.init.usePackage.evil-collection = {
  enable = true;
  preface = lib.mkIf hasSwap ''
    (defun nix-emacs-hjkl-rotation (_mode mode-keymaps &rest _rest)
      (evil-collection-translate-key '(normal motion) mode-keymaps
        "e" "j"
        "o" "k"
        "i" "l"
        "n" "h"))
  '';
}; 
#+end_src

**** =extraConfig=
A string containing any extra lines you want to put in your use-package statement. Good for using keywords not explicitly supported by this framework

**** =init=
A string containing all the text for use-package's =:init= option

**** =earlyInit=
Adds the string set in the option to the end of the early-init.el file

**** =extraPackages=
Additional nix packages to add to =home.packages= when this package is enabled

**** =babel=
Lets the user specify a language to use =org-babel-do-load-languages= on.

Example:
#+begin_src nix
  programs.emacs.init.usePackage.ob-hy = {
    enable = true;
    babel = lib.mkIf ide.org.enable "hy";
  };
#+end_src

** Configuration Presets
*** keybinds
**** avy
***** =programs.emacs.init.keybinds.avy.enable=
Enables avy support.

Largely borrowed from [[https://karthinks.com/software/avy-can-do-anything/][karthinks]]

Also enables relevant plugins for any completion systems you may have installed

***** =programs.emacs.init.keybinds.avy.evilModifierKey=
The modifier key to use for evil easymotions. Defaults to ="M"=.

Easymotion keybinds are M-[key used for the normal movement]

**** =programs.emacs.init.keybinds.electricPair.enable=
Enables electric-pair-mode.  Borrowed from [[https://gitlab.com/dwt1/configuring-emacs][Derek Taylor]]

**** evil
***** =programs.emacs.init.keybinds.evil.enable=
Boolean that enables support for evil mode.

Because we're using =C-u= to scroll, =M-u= is the universal argument.

***** keys
These variables can be used to easily alter some of evil's motion keys, both for itself, & for other modules that use it

Symex's keybinds will not be modified, since that is done by modifying the variable =symex--evil-keyspec=. If the framework were to do this, it would make it harder for the user to modify those keybinds further

****** =programs.emacs.init.keybinds.evil.keys.up=
Defaults to ="k"=.

****** =programs.emacs.init.keybinds.evil.keys.down=
Defaults to ="j"=.

****** =programs.emacs.init.keybinds.evil.keys.forward=
Defaults to ="l"=.

****** =programs.emacs.init.keybinds.evil.keys.backward=
Defaults to ="h"=.

****** =programs.emacs.init.keybinds.evil.keys.evil-collection-swap-keys=
A string of keys to be swapped.
Example: (new keys are on the left, old keys are on the right)
#+begin_src nix
programs.emacs.init.keybinds.evil.keys.evil-collection-swap-keys = ''
  "e" "j"
  "o" "k"
  "n" "h"
  "i" "l"
'';
#+end_src

**** =programs.emacs.init.keybinds.evilNerdCommenter.enable=
Enables evil-nerd-commenter. It's reccomended to enable leader keys

All relevant keys are bound to ="SPC c"=

**** =programs.emacs.init.keybinds.evil.surround=
Enables evil surround

**** leader keys
Bindings for global-leader:
+ h: help-map
+ f: find-file
+ P: project-prefix-map or projectile-command-map (depending on which of the two you enabled)
+ o: org bindings (if you enabled org's preset)
  - a: org-agenda
  - p: org-capture

Bindings for local-leader:
+ org-mode (if org's preset is enabled):
  - e: org-export-dispatch
  - i: org-toggle-inline-images
  - b: org-edit-special (edits a code block)
+ eglot (if eglot's preset is enabled)
  - f: eglot-format-buffer
  - a: eglot-code-actions
  - d: eldoc-doc-buffer
+ racket (if racket's preset is enabled)
  - .: racket-xp-describe
  - r: racket-run
+ python (if python's preset is enabled)
  - r: python-shell-send-buffer
  - e: code-cells-eval (if jupyter support is enabled)
+ clojure (if clojure's preset is enabled)
  - s: cider-jack-in (starts cider)
+ prolog (if prolog's preset is enabled)
  - r: run-prolog
+ latex (if latex's preset is enabled)
  - p: preview-at-point
  - u: preview-clearout-at-point (unpreview)

***** =programs.emacs.init.keybinds.leader-keys.enable=
Enables leader keys. (global-leader for global bindings & local-leader for local bindings)

***** =programs.emacs.init.keybinds.leader-keys.globalPrefix=
The prefix key to be used by global-leader (ie. "s" "S" "C" or "M")

***** =programs.emacs.init.keybinds.leader-keys.localPrefix=
The prefix key to be used by local-leader (ie. "s" "S" "C" or "M")

**** =programs.emacs.init.keybinds.undo.enable=
Enables linear undos with [[https://melpa.org/#/undo-fu][undo-fu]]

**** =programs.emacs.init.keybinds.doomEscape.enable=
Enables doom/escape, as seen in doom emacs.
+ =C-g= will run doom/escape.
+ If you're using evil, hitting escape while in normal mode will run doom/escape
+ Functions can be added to doom-escape-hook in order to run them whenever doom/escape runs

**** Which Key
***** =programs.emacs.init.keybinds.whichKey.enable=
Enables [[https://github.com/justbur/emacs-which-key][which-key]]

***** =programs.emacs.init.keybinds.whichKey.posframe.enable=
Creates a posframe popup for which-key

***** =programs.emacs.init.keybinds.whichKey.posframe.unparent=
Posframe appears in a new frame, which can be useful if you use exwm.

**** =programs.emacs.init.keybinds.god.enable=
Enables [[https://github.com/emacsorphanage/god-mode][god-mode]]. This module is borrowed from doom.

If =programs.emacs.init.keybinds.evil.enable= is true, [[https://github.com/gridaphobe/evil-god-state][evil-god-state]] will be installed.
+ You can enter it with =,= & exit it with =ESC=.
+ Pressing =RET= will enter emacs state

If =programs.emacs.init.keybinds.doomEscape.enable= is true, =doom/escape= will exit god state
*** completion systems
**** company
***** =programs.emacs.init.completions.company.enable=
Enables company. Largely borrowed from Doom.

***** =programs.emacs.init.completions.company.posframe=
Company uses a posframe for its completions. Largely borrowed from Doom.

**** corfu
***** =programs.emacs.init.completions.corfu.enable=
Enables corfu for in-buffer completion. Much is borrowed from Doom & Gavin Freeborn's config.

***** =programs.emacs.init.completions.corfu.wantTabComplete=
Enables tab completion. Defaults to true

***** =programs.emacs.init.completions.corfu.wantRetConfirm=
Enables return completion. Defaults to true. If set to false, S-return will be used instead. Blatantly plagiarized from doom.

***** =programs.emacs.init.completions.corfu.wantMinibuffer=
Enables corfu in the minibuffer

***** =programs.emacs.init.completions.corfu.popupInfo=
Enables corfu-popupinfo

**** ivy
***** =programs.emacs.init.completions.ivy.enable=
Enables ivy completions. Largely borrowed from doom.

***** =programs.emacs.init.completions.ivy.swiperReplaceSearch=
Swiper replaces isearch/evil search. Some configuration stolen from noctuid

***** =programs.emacs.init.completions.ivy.posframe=
Ivy uses a posframe for its completions

**** =programs.emacs.init.completions.orderless=
Enables orderless completion styles. Borrowed from David Wilson's config

**** =programs.emacs.init.completions.prescient=
Enables prescient sorting where possible

**** vertico
***** =programs.emacs.init.completions.vertico.enable=
Enables vertico as a completion system. Many things are borrowed from Doom

***** =programs.emacs.init.completions.vertico.embark=
Enables embark's completion actions. Borrowed from Karthink, the embark wiki, & Doom

***** =programs.emacs.init.completions.vertico.evilConsultLine=
Evil's / runs consult-line. Borrowed from Noctuid's config. Only works with orderless

*** ide
**** Eglot
***** =programs.emacs.init.ide.eglot.enable= 
A boolean that will enable eglot for all languages in the language support presets.

This is the language server client that will receive the most support

Default: =false=

***** =programs.emacs.init.ide.eglot.preset= 
A boolean that enables eglot's preset.

Notable package additions:
+ [[https://github.com/jdtsmith/eglot-booster][eglot booster]]
+ [[https://github.com/nemethf/eglot-x][eglot-x]]

Default: =false=
**** Lsp
***** =programs.emacs.init.ide.lsp.enable= 
A boolean that will enable lsp-mode for all languages in the language support presets

Default: =false=

***** =programs.emacs.init.ide.lsp.preset= 
A boolean that enables lsp-mode's preset, which is largely borrowed from Doom

Default: =false=

**** Lspce
***** =programs.emacs.init.ide.lspce.enable= 
A boolean that will enable lspce-mode for all languages in the language support presets

Default: =false=

***** =programs.emacs.init.ide.lspce.preset= 
A boolean that enables lspce's preset. Doesn't do anything too interesting on its own, but it will enable eldoc-box if you have hoverDoc enabled

Default: =false=

**** Lsp Bridge
***** =programs.emacs.init.ide.lsp-bridge.enable= 
A boolean that will enable lsp-bridge-mode for most languages in the language support presets. It also enables lsp-bridge's preset.

No new language servers will be supported by this framework

Default: =false=

**** =programs.emacs.init.ide.treesitterGrammars=
An attribute set of language names & links to their grammars.

When this option is used, it implicitly enables the treesitter module & adds the elisp macro =treesit!=, which generates a lambda that activates the treesitter grammar for the given language (see the macro documentation for more details).
It doesn't seem to work with the hook keyword, but ghook, gfhook, & elisp's add-hook all work fine.

**** =programs.emacs.init.ide.symex=
A boolean that will enable symex for all languages in the language support presets

Default: =false=

**** =programs.emacs.init.ide.hoverDoc=
A boolean that will enable hoverdoc whenever it's relevant.

For eglot, lspce, & emacs-lisp mode, this is done with [[https://github.com/casouri/eldoc-box][eldoc-box]]. For lsp-mode, this is done with lsp-ui

**** =programs.emacs.init.ide.breadcrumb=
A boolean that will enable breadcrumbs in emacs-lisp-mode, eglot-mode, lsp-mode, & lspce-mode

**** Flymake
***** =programs.emacs.init.ide.flymake.enable=
Enables flymake in all languages where it's useful.

***** =programs.emacs.init.ide.flymake.preset=
Enables the flymake preset configuration (largely borrowed from doom)

**** Flycheck
***** =programs.emacs.init.ide.flycheck.enable=
Enables flycheck in all languages where it's useful.

***** =programs.emacs.init.ide.flycheck.preset=
Enables the flycheck preset configuration (largely borrowed from doom)

**** =programs.emacs.init.ide.project=
Enables the preset for project.el.

Notable additions:
+ a lot more project root markers
+ [[https://github.com/mohkale/projection][projection]]. =projection-multi-compile= is bound to enter in the =project-mode-map=

**** =programs.emacs.init.ide.projectile=
Enables the preset for projectile.

**** =programs.emacs.init.ide.direnv=
Enables direnv support

If leader keys are enabled, relevant bindings are bound to SPC e

**** Language Support
Every option here can be found under =programs.emacs.init.ide.languages=

If =programs.emacs.init.ide.eglot.enable= or =programs.emacs.init.ide.lsp.enable= are set to true, appropriate language servers will be installed automatically

***** =bash.enable=
Boolean value that enables bash support

***** =clojure.enable=
Boolean value that enables clojure support

***** c
****** =c.enable=
Boolean value that enables c support

****** =c.preferClangd=
Boolean value that installs clangd when an language server client is enabled instead of ccls

***** =coffeescript.enable=
Boolean value that enables coffeescript support.

***** =common-lisp.enable=
Boolean value that enables common-lisp support.

sbcl is installed automatically for use with sly. Altering =programs.emacs.init.usePackage.sly.custom.inferior-lisp-program= will stop this behaviour, if it is unwanted.

I stole this module from Doom Emacs

***** =csharp.enable=
Boolean value that enables c sharp support.

Because I couldn't find a working copy of omnisharp in the nix repos, you're stuck with csharp ls

This module was slightly stolen from doom, but I did trim it down quite a lot

***** css
****** =css.enable=
Boolean value that enables css support

****** =css.emmet=
Boolean value that enables emmet in css buffers

***** dart
****** =dart.enable=
Boolean value that enables dart support. You will need to install the language server yourself, since I can't find it in nixpkgs

****** =flutter.enable=
Boolean value that enables flutter support

***** =emacs-lisp.enable=
This module was borrowed from doom.

Enables additional tools to assist in writing emacs lisp packages.

***** =erlang.enable=
Boolean option that enables erlang support

***** =fennel.enable=
Boolean option that enables fennel support

***** =forth.enable=
Boolean option that enables forth support

***** =go.enable=
Boolean option that enables go support

***** =gradle.enable=
Boolean option that enables gradle support

***** =haskell.enable=
Boolean option that enables haskell support

Due to crashes, symex is currently disabled

***** html
****** =html.enable=
Boolean option that enables html support

****** =html.emmet=
Boolean value that enables emmet in css buffers

***** =hy.enable=
Boolean option that enables hy support

***** java
****** =java.enable=
Boolean option that enables java support

****** =java.eglotJava=
Boolean option to install [[https://github.com/yveszoundi/eglot-java][eglot-java]], allowing the user to take advantage of more of jdtls's features. Doing this will stop nix from installing jdtls from you, potentially resulting in user irritation.

***** =javascript.enable=
Boolean option that enables javascript support

***** =json.enable=
Boolean option that enables json support

***** =julia.enable=
Boolean option that enables julia support. You will need to install julia yourself

***** =kotlin.enable=
Boolean option that enables kotlin support

***** latex
Many thanks to David Wilson, who I took the original version of this config from. It's since changed quite a lot

****** =latex.enable=
Boolean option that enables latex support

****** =latex.magicLatexBuffer=
Boolean option that enables [[https://github.com/zk-phi/magic-latex-buffer][Magic Latex Buffer]], in order to make your latex buffers look pretty

****** =latex.cdlatex=
Boolean option that enables [[https://github.com/cdominik/cdlatex][cdlatex]] for fast completions

****** =latex.preferTexlab=
If an lsp client is enabled & this variable is set to true, install [[https://github.com/latex-lsp/texlab][texlab]] instead of [[https://ctan.org/pkg/digestif][digestif]]

***** =ledger.enable=
Enables ledger support

***** =lua.enable=
Boolean value that enables lua support

***** =markdown.enable=
Boolean that enables markdown support

***** =nix.enable=
Boolean that enables nix support.

A small portion was stolen from doom.

***** Org
****** =org.enable=
Boolean option that enables org support

****** Aesthetics
******* =org.aesthetics.enable=
Enables [[https://github.com/minad/org-modern][org-modern]] & [[https://github.com/jdtsmith/org-modern-indent][org-modern-indent]]

******* =org.aesthetics.headerFont=
The font to use for org headers. Defaults to ="Liberation Serif"=.

****** Capture Templates
******* =org.captureTemplates.enables=
Enables doom's org capture templates

******* =org.captureTemplates.notesFile=
The file in your org-directory to put your notes in. Defaults to ="notes.org"=

******* =org.captureTemplates.journalFIle=
The file in your org-directory to put your journal entries in. Defaults to ="journal.org"=

***** =plantuml.enable=
Boolean that enables plantuml support.

Plantuml will be installed automatically. You can prevent this by altering =programs.emacs.init.usePackage.plantuml-mode.custom.plantuml-executable-path= & =programs.emacs.init.usePackage.plantuml-mode.custom.org-plantuml-executable-path=

***** =prolog.enable=
Boolean option that enables prolog support

***** =pug.enable=
Boolean option that enables pug support

***** =purescript.enable=
Boolean option that enables purescript support

***** python
****** =python.enable=
Boolean option that enables python support

****** =python.jupyter=
Enables [[https://github.com/astoff/code-cells.el][code-cells]], allowing you to edit jupyter notebooks in
emacs.

This does not give you the ability to interact with jupyter from emacs.

****** =python.language-server=
A string determining what language server to install, if a language server client is enabled

Options include:
+ basedpyright
+ pylsp
+ pyright
+ jedi

Inputting any other text will result in no language server being installed

Based pyright config originates from here: https://gregnewman.io/blog/emacs-take-two/

***** =racket.enable=
Boolean option to enable racket support.

Note that you will need to install the language server yourself, since it's not in the nix repos

***** =r.enable=
Boolean option to enable r support.

***** =ruby.enable=
Boolean option to enable ruby support.

The module is largely stolen from doom emacs, although a lot of packages were not included

***** =rust.enable=
Boolean option to enable rust support.

***** =scala.enable=
Boolean option to enable scala support.

You will need to install sbt yourself in order to use [[https://github.com/hvesalai/emacs-sbt-mode][sbt-mode]]

This module was largely stolen from doom emacs

***** =scheme.enable=
Boolean option to enable scheme support.

***** =sql.enable=
Boolean option to enable sql support.

***** =svelte.enable=
Boolean option to enable svelte support.

Currently only works with eglot & lspce

***** =swift.enable=
Boolean option to enable swift support.

***** =toml.enable=
Boolean option to enable toml support.

***** =typescript.enable=
Boolean option to enable typescript support.

***** =vimscript.enable=
Boolean option to enable vimscript support.

***** =xml.enable=
Boolean option to enable xml support.

***** =zenscript.enable=
Boolean option to enable zenscript support.

***** =zig.enable=
Boolean option to enable zig support.

