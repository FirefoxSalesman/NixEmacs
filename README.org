Adapted from: [[https://gitlab.com/rycee/nur-expressions][Rycee's NUR Expressions]]

* Installation
Add this module to your nix flake

Example:
#+begin_src nix
  {
    description = "Home manager config flake";

    inputs = {
      nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
      emacs-init.url = "github:firefoxsalesman/NixEmacs";
      
      home-manager = {
        url = "github:nix-community/home-manager";
        inputs.nixpkgs.follows = "nixpkgs";
      };
    };

    outputs = { self, home-manager, nixpkgs, emacs-init, ... }@inputs:
      let
        system = "x86_64-linux";
        
        pkgs = import nixpkgs {
          inherit system;
          config.allowUnfree = true;
          overlays = [
            inputs.emacs-init.overlay
          ];        
        };
      in
        {
          homeConfigurations."holschcc" = home-manager.lib.homeManagerConfiguration {
            inherit pkgs;
            extraSpecialArgs = {
              inherit self;
              inherit inputs;
              inherit system;
            };
            modules = [
              ./home.nix
              emacs-init.homeModules.emacs-init
              emacs-init.homeModules.emacs-presets # if you would like to use configuration presets
            ];
          } ;
        } ;
  }

#+end_src

* Usage
All options are found under =programs.emacs.init=

You will need to set =programs.emacs.init.enable= to true in order for this module to do anything

You will need emacs 30 in order to take advantage of the presets, as many of them use new features introduced in that version

* Options
** Optimizations
*** =programs.emacs.init.packageQuickstart=
If set to false, package.el will be disabled.

Type: Boolean

Default: true

*** =programs.emacs.init.recommendedGcSettings=
If set to true, emacs will wait until it has started to do garbage collections

Type: Boolean

Default: false

*** =programs.emacs.init.largeFileHandling=
If set to true, will optimize the opening of large files (as seen in [[https://github.com/doomemacs/doomemacs][Doom Emacs]])

Type: Boolean

Default: false

** =programs.emacs.init.earlyInit=
The contents of early-init.el

Type: String

Default: ""

** =programs.emacs.init.prelude=
Configuration to put at the start of init.el

Type: String

Default: ""

** =programs.emacs.init.postlude=
Configuration to put at the end of init.el

Type: String

Default: ""

** =programs.emacs.init.usePackageVerbose=
Type: Boolean

Sets =use-package-verbose= to the appropriate value

Default: False

** =programs.emacs.init.usePackage=
Contains all the different packages you want to configure.

Some things of note:
+ Nix will sort your packages alphabetically when it generates your init.el. There is no way around this, so if you need to specify load order, you'll need to use keywords like =after=
+ NixEmacs will automatically install the packages specified in these use package statements
+ Don't forget to set =enable= to true for each package.

*** An example
#+begin_src nix
  programs.emacs.init.usePackage.mpv = {
      enable = true;
      command = ["efs/mpv-browse-url" "efs/mpv-eww-url"];
      config = ''
        (defun efs/mpv-browse-url (url &optional single)
          (mpv-play-url url))
      
        (defun efs/mpv-eww-url ()
          (interactive)
          (mpv-play-url (eww-current-url)))
      '';
  };
#+end_src

*** Options
**** =package=
The emacs package to install

Defaults to the name of the package being configured & loaded, so you won't need to set this unless the name of the package being loaded differs from its name in the repository

**** =chords=
Sets the =:chords= option for [[https://github.com/waymondo/use-package-chords][Use Package Chords]]

If you use this option, Use Package Chords will be installed & loaded for you

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.ace-jump-mode.chords = {
    "jj" = "ace-jump-char-mode";
    "jk" = "ace-jump-word-mode";
  };
#+end_src

**** =bind=
Sets the =:bind= option.

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.ace-jump-mode.bind = {
    "c" = "ace-jump-char-mode";
    "w" = "ace-jump-word-mode";
  };
#+end_src

**** =bind-local=
Sets the =:bind= option with local keymaps

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.helm = {
    enable = true;
    bindLocal = {
      helm-command-map = { "C-c h" = "helm-execute-persistent-action"; };
    };
  };
#+end_src

**** =bind-keymap=
The entries to use for =:bind-keymap=

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.projectile = {
    enable = true;
    bindKeyMap = {
      "C-c p" = "projectile-command-map";
    };
  };
#+end_src

**** =mode=
Entries for =:mode=. Don't forget to double quote each entry.

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.python-ts-mode = {
      enable = true;
      mode = [''"\\.py\\'"''];
  };
#+end_src

**** =after=
A list of packages to be used in use-package's =:after= keyword

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.evil-collection = {
    enable = true;
    after = ["evil"];
  };
#+end_src

**** =afterCall=
Entries to use for the =:after-call= option (as seen in [[https://github.com/doomemacs/doomemacs][Doom Emacs]])

Basically, after call defers loading the package until the specified hook is run

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.eshell-git-prompt = {
    enable = true;
    afterCall = ["eshell-mode"];
  };
#+end_src

**** =defer=
The =:defer= option. Can be a boolean or a positive number

**** =deferIncrementally=
The =:defer-incrementally= option (as seen in [[https://github.com/doomemacs/doomemacs][Doom Emacs]])

When emacs is done loading, incrementally deferred packages will start to load while emacs is idle.

This option can be set to true, or to a list of package names.
+ If it's true, loading will behave as described above
+ If it's a list of package names, those packages will be incrementally loaded first (this is useful for breaking up large packages like org-mode)

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage = {
    nxml = {
      enable = true;
      deferIncrementally = true;
    };

    org = {
      enable = true;
      deferIncrementally = ["calendar" "find-func" "format-spec" "org-macs" "org-compat" "org-faces" "org-entities" "org-list" "org-pcomplete" "org-src" "org-footnote" "org-macro" "ob" "org" "org-agenda" "org-capture" "evil-org-agenda"];
    };
  };
#+end_src

**** =command=
The =:commands= keyword.

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.nerd-icons = {
    enable = true;
    command = [
      "nerd-icons-octicon"
      "nerd-icons-faicon"
      "nerd-icons-flicon"
      "nerd-icons-wicon"
      "nerd-icons-mdicon"
      "nerd-icons-codicon"
      "nerd-icons-devicon"
      "nerd-icons-ipsicon"
      "nerd-icons-pomicon"
      "nerd-icons-powerline"
    ];
  };
#+end_src

**** =hook=
The =:hook= option for use-package.

Example usage:
#+begin_src nix
  programs.emacs.usePackage.init.eglot = {
    enable = true;
    hook = ["(python-mode . eglot-ensure)"];
  };
#+end_src

**** General.el
Using any of these optins will automatically install & load general.
***** =general=
Used for global keys in the =:general= option.

In order to facilitate remapping, keys are not quoted automatically.

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.helpful = {
    enable = true;
    general = {
      "[remap describe-variable]" = "'helpful-variable";
      ''"C-h f"'' = "'helpful-function";
    };
  };
#+end_src

***** =generalOne=
Sets =:general= keybindings with one additional argument (such as evil state, keymap, or leader key)

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.consult = {
    enable = true;
    generalOne = {
      "'normal" = {
        "/" = "'consult-line";
      };
      "org-mode-map" = {
        "M-a" = "'consult-org-heading";
      };
    };
  };
#+end_src

***** =generalTwo=
Sets =:general= options that take 2 arguments (such as evil state, keymap, or leader key)

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.vundo = {
    enable = true;
    generalTwo = "'normal".vundo-mode-map."C-e" = "'vundo-next";
  };
#+end_src

***** =ghook=
The =:ghook= option from general.el

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.envrc = {
    enable = true;
    ghook = ["('after-init-hook 'envrc-global-mode)"];
  };
#+end_src

***** =gfhook=
The =:gfhook= option from general.el

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.racket-mode = {
      enable = true;
      gfhook = ["('racket-mode-hook 'hs-minor-mode)"];
  };
#+end_src

**** =defines=
The =:defines= option from use-package.

Takes a list of strings, which should be the names of the functions the package defines

**** =lsp=
Loads & starts lsp-mode upon entering the package's major mode

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.racket-mode = {
    enable = true;
    lsp = true;
  };
#+end_src

**** =eglot=
Loads & starts eglot upon entering the package's major mode

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.racket-mode = {
    enable = true;
    eglot = true;
  };
#+end_src

**** =symex=
Binds =symex-mode-interface= to enter in evil's normal state for the package's major mode. This will also load symex if it isn't already loaded

Setting this option will install symex automatically

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.racket-mode = {
    enable = true;
    symex = true;
  };
#+end_src

**** =demand=
The =:demand= option from use package.

Type: boolean

**** =diminish=
A list of strings to be passed to the =:diminish= 

If this option is set, diminish will be installed & loaded automatically

**** =functions=
The =:functions= option from use-package.

Takes a list of strings, which should be the names of the functions the package defines

**** =custom=
The =:custom= option

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.dashboard = {
    enable = true;
    custom = {
      dashboard-banner-logo-title = ''"Emacs: The one true desktop environment"'';
      dashboard-center-content = "t";
      dashboard-items = '''((recents   . 5)
                            (bookmarks . 5)
                            (projects  . 5)
                            (agenda    . 5))'';
      dashboard-icon-type = "'nerd-icons";
      dashboard-set-heading-icons = "t";
      dashboard-set-file-icons = "t";
      dashboard-agenda-sort-strategy = "'(time-up)";
    };
  };
#+end_src

**** =config=
Use package's =:config= option. Takes a string

Example usage:
#+begin_src nix
  programs.emacs.init.usePackage.elec-pair = {
    enable = true;
    config = ''
      ;; < & > are not delimiters. Change my mind.
      ;; Courtesy of DT. https://gitlab.com/dwt1/configuring-emacs/-/tree/main/07-the-final-touches?ref_type=heads
      (gsetq electric-pair-inhibit-predicate `(lambda (c)
        (if (or (char-equal c ?<) (char-equal c ?>))
            t
            (,electric-pair-inhibit-predicate c))))
    '';
  };
#+end_src

**** =extraConfig=
A string containing any extra lines you want to put in your use-package statement. Good for using keywords not explicitly supported by this framework

**** =init=
A string containing all the text for use-package's =:init= option

**** =earlyInit=
Adds the string set in the option to the end of the early-init.el file

**** =extraPackages=
Additional nix packages to add to =home.packages= when this package is enabled

** Configuration Presets
*** ide
**** Eglot
***** =programs.emacs.init.ide.eglot.enable= 
A boolean that will enable eglot for all languages in the language support presets

Default: =false=

**** Lsp
***** =programs.emacs.init.ide.lsp.enable= 
A boolean that will enable lsp-mode for all languages in the language support presets

Default: =false=

**** =programs.emacs.init.ide.symex=
A boolean that will enable symex for all languages in the language support presets

Default: =false=

**** Language Support
Every option here can be found under =programs.emacs.init.ide.languages=

If =programs.emacs.init.ide.eglot.enable= or =programs.emacs.init.ide.lsp.enable= are set to true, appropriate language servers will be installed automatically

***** =bash.enable=
Boolean value that enables bash support

***** =clojure.enable=
Boolean value that enables clojure support

***** c
****** =c.enable=
Boolean value that enables c support

****** =c.preferClangd=
Boolean value that installs clangd when an language server client is enabled instead of ccls

***** =common-lisp.enable=
Boolean value that enables common-lisp support.

sbcl is installed automatically for use with sly. Altering =programs.emacs.init.usePackage.sly.custom.inferior-lisp-program= will stop this behaviour, if it is unwanted.

I stole this module from Doom Emacs

***** =csharp.enable=
Boolean value that enables c sharp support.

Because I couldn't find a working copy of omnisharp in the nix repos, you're stuck with csharp ls

This module was slightly stolen from doom, but I did trim it down quite a lot

***** css
****** =css.enable=
Boolean value that enables css support

****** =css.emmet=
Boolean value that enables emmet in css buffers

***** =erlang.enable=
Boolean option that enables erlang support

***** =fennel.enable=
Boolean option that enables fennel support

***** =forth.enable=
Boolean option that enables forth support

***** =go.enable=
Boolean option that enables go support

***** =gradle.enable=
Boolean option that enables gradle support

***** =haskell.enable=
Boolean option that enables haskell support

Due to crashes, symex is currently disabled

***** html
****** =html.enable=
Boolean option that enables html support

****** =html.emmet=
Boolean value that enables emmet in css buffers

***** =hy.enable=
Boolean option that enables hy support

***** =java.enable=
Boolean option that enables java support

***** =javascript.enable=
Boolean option that enables javascript support

***** =json.enable=
Boolean option that enables json support

***** =kotlin.enable=
Boolean option that enables kotlin support

***** latex
Many thanks to David Wilson, who I took the original version of this config from. It's since changed quite a lot

****** =latex.enable=
Boolean option that enables latex support

****** =latex.magicLatexBuffer=
Boolean option that enables [[https://github.com/zk-phi/magic-latex-buffer][Magic Latex Buffer]], in order to make your latex buffers look pretty

****** =latex.cdlatex=
Boolean option that enables [[https://github.com/cdominik/cdlatex][cdlatex]] for fast completions

****** =latex.preferTexlab=
If an lsp client is enabled & this variable is set to true, install [[https://github.com/latex-lsp/texlab][texlab]] instead of [[https://ctan.org/pkg/digestif][digestif]]

***** =lua.enable=
Boolean value that enables lua support

***** markdown
****** =markdown.enable=
Boolean that enables markdown support

****** =markdown.evil=
Sets up [[https://github.com/Somelauw/evil-markdown][evil-markdown]]

***** =nix.enable=
Boolean that enables nix support.

A small portion was stolen from doom.

***** =plantuml.enable=
Boolean that enables plantuml support.

Plantuml will be installed automatically. You can prevent this by altering =programs.emacs.init.usePackage.plantuml-mode.custom.plantuml-executable-path= & =programs.emacs.init.usePackage.plantuml-mode.custom.org-plantuml-executable-path=

***** =prolog.enable=
Boolean option that enables prolog support

***** =pug.enable=
Boolean option that enables pug support

***** python
****** =python.enable=
Boolean option that enables python support

****** =python.jupyter=
Enables [[https://github.com/astoff/code-cells.el][code-cells]], allowing you to edit jupyter notebooks in
emacs.

This does not give you the ability to interact with jupyter from emacs.

****** =python.language-server=
A string determining what language server to install, if a language server client is enabled

Options include:
+ basedpyright
+ pylsp
+ pyright
+ jedi

Inputting any other text will result in no language server being installed

Based pyright config originates from here: https://gregnewman.io/blog/emacs-take-two/

***** =racket.enable=
Boolean option to enable racket support.

Note that you will need to install the language server yourself, since it's not in the nix repos

***** =r.enable=
Boolean option to enable r support.

***** =ruby.enable=
Boolean option to enable ruby support.

The module is largely stolen from doom emacs, although a lot of packages were not included

***** =rust.enable=
Boolean option to enable rust support.

***** =scala.enable=
Boolean option to enable scala support.

You will need to install sbt yourself in order to use [[https://github.com/hvesalai/emacs-sbt-mode][sbt-mode]]

This module was largely stolen from doom emacs

***** scheme
This entire module is stolen from doom

****** =scheme.enable=
Boolean option to enable scheme support through [[https://gitlab.com/emacs-geiser/geiser/][geiser]]

You will need to enable support for your chosen implementation of scheme in order for this to be useful

****** =scheme.chez=
Boolean option for chez scheme. Chez scheme will be installed outside your path unless you alter =programs.emacs.init.usePackage.geiser-chez.custom.geiser-chez-binary=.

****** =scheme.chicken=
Boolean option for chicken scheme. Chicken scheme will be installed outside your path unless you alter =programs.emacs.init.usePackage.geiser-chicken.custom.geiser-chicken-binary=.

****** =scheme.gambit=
Boolean option for gambit scheme. Gambit scheme will be installed outside your path unless you alter =programs.emacs.init.usePackage.geiser-gambit.custom.geiser-gambit-binary=.

****** =scheme.guache=
Boolean option for guache scheme. Guache scheme will be installed outside your path unless you alter =programs.emacs.init.usePackage.geiser-guache.custom.geiser-guache-binary=.

****** =scheme.guile=
Boolean option for guile scheme. Guile scheme will be installed outside your path unless you alter =programs.emacs.init.usePackage.geiser-guile.custom.geiser-guile-binary=.

****** =scheme.kawa=
Boolean option for kawa scheme.

****** =scheme.mit=
Boolean option for mit scheme. mit scheme will be installed outside your path unless you alter =programs.emacs.init.usePackage.geiser-mit.custom.geiser-mit-binary=.

****** =scheme.stklos=
Boolean option for stklos scheme.

***** =sql.enable=
Boolean option to enable sql support.

***** =toml.enable=
Boolean option to enable toml support.

***** =typescript.enable=
Boolean option to enable typescript support.

***** =xml.enable=
Boolean option to enable xml support.

***** =zenscript.enable=
Boolean option to enable zenscript support.

***** =zig.enable=
Boolean option to enable zig support.

* TODO
+ [ ] Add some modules for language support
